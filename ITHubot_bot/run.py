import asyncio
import logging
import os
from aiohttp import ClientSession
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã.
bot = Bot(token=os.getenv('TOKEN'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä.
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞
button_tests = KeyboardButton(text='–¢–µ—Å—Ç—ã')
button_rating = KeyboardButton(text='–†–µ–π—Ç–∏–Ω–≥')
button_results = KeyboardButton(text='–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
button_help = KeyboardButton(text='–ü–æ–º–æ—â—å')

# –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä ReplyKeyboardMarkup –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [button_tests],
        [button_results],
        [button_rating],
        [button_help]
    ],
    resize_keyboard=True
)

# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start.
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –Ω–∞—á–∞—Ç—å –µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.\n"
        "\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–º–æ—â—å'.",
        reply_markup=main_keyboard  # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    )

# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help.
@dp.message(Command('help'))
async def get_help(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.\n"
        "\n"
        "üìù –Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–≤–∏–∑—ã –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!\n\n"
        "–ß—Ç–æ —è –º–æ–≥—É:\n"
        "- –ü—Ä–µ–¥–ª–∞–≥–∞—é –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.\n"
        "- –ó–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å—ã –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –∏ —Å–æ–±–∏—Ä–∞—é –æ—Ç–≤–µ—Ç—ã.\n"
        "- –ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n\n"
        "–î–ª—è —É—á–∞—Å—Ç–∏—è:\n"
        "- –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω.\n"
        "- –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –∑–∞–¥–∞–º.\n"
        "- –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–∑–Ω–∞–π, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è!"
    )

# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–µ—Å—Ç—ã".
@dp.message(lambda message: message.text == '–¢–µ—Å—Ç—ã')
async def handle_tests_button(message: Message):
    async with ClientSession() as session:
        try:
            async with session.get('http://localhost:3333/admin/get/test') as response:
                if response.status == 200:
                    tests = await response.json()
                    logging.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {tests}")

                    inline_keyboard = InlineKeyboardMarkup(row_width=2)
                    for test in tests:
                        test_button = InlineKeyboardButton(text=test['title'], callback_data=f"test_{test['testId']}")
                        inline_keyboard.add(test_button)

                    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —É–¥–∞–ª–∏—Ç–µ —Ä–µ–ø–ª–∞–π –∫–Ω–æ–ø–∫–∏
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:", reply_markup=inline_keyboard)
                    await message.answer("–†–µ–ø–ª–∞–π –∫–Ω–æ–ø–∫–∏ —Å–∫—Ä—ã—Ç—ã.", reply_markup=ReplyKeyboardRemove())
                else:
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def handle_test_selection(callback_query: CallbackQuery):
    test_id = callback_query.data.split("_")[1]
    async with ClientSession() as session:
        try:
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ
            async with session.get(f'http://localhost:3333/admin/get/test/{test_id}') as response:
                if response.status == 200:
                    test_info = await response.json()
                    test_title = test_info.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞')
                    test_description = test_info.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞')

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback_query.message.answer(f"–¢–µ—Å—Ç: **{test_title}**\n–û–ø–∏—Å–∞–Ω–∏–µ: **{test_description}**")
                else:
                    await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

    # –û—Ç–≤–µ—Ç –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –æ–∂–∏–¥–∞–Ω–∏—è
    await callback_query.answer()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ Telegram
    await dp.start_polling(bot)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π
if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
    logging.basicConfig(level=logging.INFO)
    try:
        # –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–í—ã—Ö–æ–¥')
