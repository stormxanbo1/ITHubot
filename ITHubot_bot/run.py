import asyncio
import logging
import os
from aiohttp import ClientSession
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã.
bot = Bot(token=os.getenv('TOKEN'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å FSM –∏ –ø–∞–º—è—Ç—å—é.
dp = Dispatcher(storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞
button_tests = KeyboardButton(text='–¢–µ—Å—Ç—ã')
button_rating = KeyboardButton(text='–†–µ–π—Ç–∏–Ω–≥')
button_results = KeyboardButton(text='–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
button_help = KeyboardButton(text='–ü–æ–º–æ—â—å')

# –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä ReplyKeyboardMarkup –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [button_tests],
        [button_rating],
        [button_results],
        [button_help]
    ],
    resize_keyboard=True
)


# –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
class TestStates(StatesGroup):
    SELECTING_TEST = State()
    IN_TEST = State()
    SHOW_RESULT = State()


# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start.
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –Ω–∞—á–∞—Ç—å –µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.\n"
        "\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–º–æ—â—å'.",
        reply_markup=main_keyboard  # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    )


# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help.
@dp.message(Command('help'))
async def get_help(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.\n"
        "\n"
        "üìù –Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–≤–∏–∑—ã –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!\n\n"
        "–ß—Ç–æ —è –º–æ–≥—É:\n"
        "- –ü—Ä–µ–¥–ª–∞–≥–∞—é –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.\n"
        "- –ó–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å—ã –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –∏ —Å–æ–±–∏—Ä–∞—é –æ—Ç–≤–µ—Ç—ã.\n"
        "- –ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n\n"
        "–î–ª—è —É—á–∞—Å—Ç–∏—è:\n"
        "- –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω.\n"
        "- –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –∑–∞–¥–∞–º.\n"
        "- –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–∑–Ω–∞–π, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è!"
    )


# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–µ—Å—Ç—ã".
@dp.message(lambda message: message.text == '–¢–µ—Å—Ç—ã')
async def handle_tests_button(message: Message, state: FSMContext):
    async with ClientSession() as session:
        try:
            async with session.get('http://localhost:3333/admin/get/test') as response:
                if response.status == 200:
                    tests = await response.json()
                    logging.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {tests}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ JSON-–æ—Ç–≤–µ—Ç–∞

                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
                    tests_list = "\n\n".join(
                        [f"–ù–∞–∑–≤–∞–Ω–∏–µ: {test['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {test['description']}" for test in tests])

                    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
                    buttons = [InlineKeyboardButton(text=test['title'], callback_data=f"test_{test['testId']}") for test
                               in tests]
                    inline_kb = InlineKeyboardMarkup(inline_keyboard=[buttons])

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
                    await message.answer(f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:\n\n{tests_list}", reply_markup=inline_kb)
                    await state.set_state(TestStates.SELECTING_TEST)
                else:
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
@dp.callback_query(lambda callback_query: callback_query.data.startswith("test_"))
async def handle_test_selection(callback_query: CallbackQuery, state: FSMContext):
    test_id = callback_query.data.split("_")[1]

    async with ClientSession() as session:
        try:
            async with session.get(f'http://localhost:3333/admin/get/test') as response:
                if response.status == 200:
                    tests = await response.json()
                    selected_test = next((test for test in tests if str(test['testId']) == test_id), None)

                    if selected_test:
                        await state.update_data(test_id=test_id, current_question=0, answers=[],
                                                selected_test=selected_test)

                        await callback_query.message.answer(
                            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ—Å—Ç:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {selected_test['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {selected_test['description']}\n–ù–∞—á–Ω–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!"
                        )
                        await state.set_state(TestStates.IN_TEST)
                        await ask_question(callback_query.message, state)
                    else:
                        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ—Å—Ç–∞")
                else:
                    await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    await callback_query.answer()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
async def ask_question(message: Message, state: FSMContext):
    data = await state.get_data()
    test_id = data['test_id']
    current_question = data['current_question']

    async with ClientSession() as session:
        try:
            async with session.get(f'http://localhost:3333/admin/get/question/{test_id}') as response:
                if response.status == 200:
                    questions = await response.json()
                    if current_question < len(questions):
                        question = questions[current_question]
                        await state.update_data(questions=questions)
                        buttons = [InlineKeyboardButton(text=option, callback_data=f"answer_{option}") for option in
                                   question['options']]
                        inline_kb = InlineKeyboardMarkup(inline_keyboard=[buttons])

                        await message.answer(f"–í–æ–ø—Ä–æ—Å {current_question + 1}: {question['text']}",
                                             reply_markup=inline_kb)
                    else:
                        await show_result(message, state)
                else:
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(lambda callback_query: callback_query.data.startswith("answer_"))
async def handle_answer_selection(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data.split("_")[1]
    data = await state.get_data()
    answers = data['answers']
    answers.append(answer)
    current_question = data['current_question'] + 1
    await state.update_data(answers=answers, current_question=current_question)

    await callback_query.answer()
    await ask_question(callback_query.message, state)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def show_result(message: Message, state: FSMContext):
    data = await state.get_data()
    answers = data['answers']
    questions = data['questions']

    correct_answers = sum(1 for i, question in enumerate(questions) if question['correct_answer'] == answers[i])
    total_questions = len(questions)
    score = (correct_answers / total_questions) * 100

    await message.answer(
        f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers} –∏–∑ {total_questions} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ({score:.2f}%).")
    await state.set_state(TestStates.SHOW_RESULT)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ Telegram
    await dp.start_polling(bot)


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π
if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
    logging.basicConfig(level=logging.INFO)
    try:
        # –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–í—ã—Ö–æ–¥')
